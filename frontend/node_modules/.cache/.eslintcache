[{"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\index.js":"1","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\App.js":"2","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Payment.jsx":"3","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Header.jsx":"4","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Form.jsx":"5","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Completion.jsx":"6"},{"size":262,"mtime":1670834544651,"results":"7","hashOfConfig":"8"},{"size":406,"mtime":1670854031625,"results":"9","hashOfConfig":"8"},{"size":4696,"mtime":1670834544650,"results":"10","hashOfConfig":"8"},{"size":244,"mtime":1670854285577,"results":"11","hashOfConfig":"8"},{"size":4898,"mtime":1670853361700,"results":"12","hashOfConfig":"8"},{"size":999,"mtime":1670854927701,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"2z36dz",{"filePath":"17","messages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"21","usedDeprecatedRules":"16"},{"filePath":"22","messages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"26","messages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\index.js",[],["28","29"],"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\App.js",[],"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Payment.jsx",["30","31"],"import React, { useState } from 'react';\r\nimport './Payment.css';\r\n\r\nfunction Payment() {\r\n    const [mode, setMode] = useState(\"\")\r\n    const [upiId, setUpiId] = useState(\"\")\r\n    const [cardName, setCardName] = useState(\"\")\r\n    const [expDate, setExpCard] = useState(\"\")\r\n    const [accountNo, setAccountNo] = useState(\"\")\r\n    const [IFSCCode, setIfscCode] = useState(\"\")\r\n\r\n    //Implement the CompletePayment function as provided\r\n    const CompletePayment = () => {\r\n\r\n        //Store the data on database by calling the REST API\r\n        fetch('http://localhost:8000/payment', {\r\n            \"method\": \"post\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n            body: JSON.stringify({\r\n                \"mode\": mode,\r\n                \"card\": {\r\n                    \"holderName\": cardName,\r\n                    \"expirationDate\": expDate,\r\n                    \"cardNo\": accountNo,\r\n                    \"cvvCode\": IFSCCode\r\n                },\r\n                \"upiId\": upiId,\r\n                \"email\": localStorage.getItem(\"email\")\r\n            })\r\n        }).then((response) => response.json())\r\n            //Response from the REST API\r\n            .then((responseData) => {\r\n                const message_id = responseData.message_id\r\n                //If data is updated or stored successfully\r\n                if (message_id == 1 || message_id == 3) {\r\n                    document.querySelector(\".paymentContainer\").style.display = \"none\"\r\n                    document.querySelector(\".completionContainer\").style.display = \"flex\"\r\n                }\r\n                //Else create mock up box for any other response\r\n                else {\r\n                    const message = responseData.message\r\n                    window.alert(message)\r\n                }\r\n            })\r\n            .catch((err) => {\r\n                console.log(`Error in accessing the server is ${err}`)\r\n            })\r\n    }\r\n    return (\r\n        <div className=\"paymentContainer\">\r\n            <h4 className=\"amountDisclaimer\">Total amount to be paid: â‚¹500</h4>\r\n            <h4 className=\"optionsHeader\">Choose Payment mode:</h4>\r\n            <div>\r\n                <div className=\"cardDiv\">\r\n                    <div className=\"optionDiv\">\r\n                        <input type=\"radio\" id=\"card\" name=\"optionNo\"\r\n                            value={mode}\r\n                            onChange={((e) => setMode('card'))}\r\n                        />\r\n                        <label className='labels' for=\"card\"><b>Debit/ATM Card</b></label>\r\n                    </div>\r\n                    <div className=\"cardDetailsDiv\">\r\n                        <input type=\"text\" id=\"cardName\" name=\"cardName\"\r\n                            value={cardName}\r\n                            onChange={((e) => setCardName(e.target.value))}\r\n                            placeholder=\"Card holder's name\"\r\n                        />\r\n                        <input type=\"text\" id=\"expDate\" name=\"expDate\"\r\n                            value={expDate}\r\n                            onChange={((e) => setExpCard(e.target.value))}\r\n                            placeholder=\"Expiration date\"\r\n                        />\r\n                        <input type=\"text\" id=\"accountNo\" name=\"accountNo\"\r\n                            value={accountNo}\r\n                            onChange={((e) => setAccountNo(e.target.value))}\r\n                            placeholder=\"Card Number\"\r\n                        />\r\n                        <input type=\"password\" id=\"IFSCCode\" name=\"IFSCCode\"\r\n                            value={IFSCCode}\r\n                            onChange={((e) => setIfscCode(e.target.value))}\r\n                            placeholder=\"CVV Code\"\r\n                        />\r\n                    </div>\r\n                </div>\r\n                <div className=\"upiDiv\">\r\n                    <div className=\"optionDiv\">\r\n                        <input type=\"radio\" id=\"UPI\" name=\"optionNo\"\r\n                            value={mode}\r\n                            onChange={((e) => setMode('upi'))}\r\n                        />\r\n                        <label className='labels' for=\"UPI\"><b>UPI</b></label>\r\n                    </div>\r\n                    <input type=\"text\" id=\"UPI_ID\" name=\"upi_id\"\r\n                        value={upiId}\r\n                        onChange={((e) => setUpiId(e.target.value))}\r\n                        placeholder=\"UPI Id\"\r\n                    />\r\n                </div>\r\n                <button className=\"toCompletion\" onClick={CompletePayment}>Complete Payment</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Payment\r\n","C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Header.jsx",[],"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Form.jsx",["32","33","34"],"C:\\Users\\singh\\FlexMoney-Assignment\\frontend\\src\\Components\\Completion.jsx",["35"],{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":37,"column":32,"nodeType":"42","messageId":"43","endLine":37,"endColumn":34},{"ruleId":"40","severity":1,"message":"41","line":37,"column":51,"nodeType":"42","messageId":"43","endLine":37,"endColumn":53},{"ruleId":"40","severity":1,"message":"41","line":40,"column":32,"nodeType":"42","messageId":"43","endLine":40,"endColumn":34},{"ruleId":"40","severity":1,"message":"41","line":40,"column":53,"nodeType":"42","messageId":"43","endLine":40,"endColumn":55},{"ruleId":"40","severity":1,"message":"41","line":56,"column":36,"nodeType":"42","messageId":"43","endLine":56,"endColumn":38},{"ruleId":"44","severity":1,"message":"45","line":12,"column":13,"nodeType":"46","endLine":12,"endColumn":31},"no-native-reassign",["47"],"no-negated-in-lhs",["48"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]